#!/bin/bash

if [[ $# -lt 2 ]]; then 
    echo "usage: elfbot <command> <app> <optional>"
    echo
    echo '<app> must match an app found in /config'
    echo
    echo "valid commands are:"
    echo
    echo "elfbot restart <app>              : restarts an app"
    echo "elfbot reset <app> [--yesiamsure] : resets an app to defaults"
    echo "backup <app> <path>               : creates a dated backup in <path>"
    echo "claim plex <token>                : claims a plex server"
fi

if [[ ! -d "/storage/config/$2" ]]; then
    echo "/config/$2 does not exist. Cannot continue"
    exit 1
fi

case $1 in

    "restart")
        echo "restarting $2..."
        touch /storage/config/$2/elfbot-restart
        ;;

    "reset")
        if [[ "$3" != "--yesiamsure" ]]; then
            echo potentially dangerous! add \'--yesiamsure\' after your reset command to force
            exit 1
        fi      
        echo "resetting $2..."
        touch /storage/config/$2/elfbot-reset
        ;;

    "backup")
        if [[ "$#" -lt 3 ]]; then 
            echo please specify a valid backup path, relative to \'/storage/\', i.e., \'storagebox-a/backup\'
            exit 1
        fi       
        echo "backing up $2 to $3..."
        TIMESTAMP=$(printf '%(%Y-%m-%d--%H-%M-%S)T\n' -1)
        echo $3/$2 > /storage/config/$2/elfbot-backup && \
        echo "restarting, backup will be saved as /storage/$3/$2-$TIMESTAMP ..."
        ;;       

    "claim")
        if [[ "$#" -lt 3 ]]; then  
            echo plex claim token missing, get one from https://www.plex.tv/claim/
            exit 1
        fi       
        if [[ ! "$3" =~ "claim-" ]]; then  
            echo plex claim token invalid, get one from https://www.plex.tv/claim/
            exit 1
        fi   
        if [[ "$2" = "plex" ]]; then
            echo "attempting plex claim with token [$3]..."
            /usr/local/bin/claim-plex-server.sh $3
        else
            echo "this command is only for claiming plex"
        fi
        ;;         

esac


